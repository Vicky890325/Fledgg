The way I estimated time was "How long would this take if everythings right and there were no problems" for low end and "How long would this have taken if everythign went wrong" for high end estimates.



background workers, so emailing does not slow down UX (2-3hrs)
	- setup emailing of users
	- setup background workers on heroku, as well as a database for the background workers to work with
	- created tasks for background workers, mainly emailing and meeting notifications
	- created code to run the tasks at appropriate times

link auto detection on user profiles info, comments, statuses, meetings, etc..(1-2hrs)
	- this took some consideration and preplanning due to security, also searched for libraries that could do this but couldn't find any
	- added backend logic to extract out any html from text that was made "link safe" 
	- added javascript to create links out of any text that was marked "linked safe"
	- fixed compatability issues with the code the was responsible for the in place editing on profiles


vanity urls: (30min-1.5hrs)
	changing the user id on user profiles to an actual name
		- patched the to params method for users which was responsible for creating urls for each user to replace the id with the user's name
		- fixed issues throughout the app in which with other functions on the website that depended on the url having an id

Bold Unread Messages (30min-1hr)
	- created logic for what a "read" and "unread" message was
	- created logic for what constituted "reading a message"
	- created logic that selected the appropriate message to be "read"
	- css and message

Pending Meetings on top (30min-45min)
	- created logic for what constituted a "pending meeting"
	- javascript to sort messages on load

Adjust Timepicker , scrap if necessary (30min-2hr)
	- added Timepicker 
	- timepicker scroll was scrolling too fast because of default plugin code
	- removed the custom scrolling functionality from the plugin that was causing problems
	- renenabled default web scrolling

Modal for when you get a meeting request 
	- there was confusion about whether or not this had to realtime and if it did,
	it would have taken much longer as that would require a separate server


Delete Button for comments and statuses (30min-45min)
	- created backend endpoint for deleting meetings
	- javascript for removal animatio of correct status and comment on click
	- small css 

Logic to limit like and unliking (30min-1hr)
	- this involved a database migration for likes
	- created logic to check whether a user liked or did not like an item 
	- added AJAX/javascript to to actually implement the effect of liking something form the UI side

Landing Page CSS Modifications (30min)
	- seems small but there were lots of details 


List of Followers/Followees/Linkedin Users page  (2.5-4hrs)
	- skills and education have added to the linkedin information retrieval
	- created separate tables in the database for skills and educations for better scaling
	- created new endpoint for users list
	- created logic for comparing a users linkedin connections with 


Other Small Things (about 10-30min each so about 3hrs)
	-Onboarding List alphabetized
	-Fix activty 10 margin scroll 
	-Fix User Profile CSS blank scrolling
	-profile placeholders to guide users  
	-SSL setup, still needs certification from namecheap
	-show 5 gray stars for unrated people 
	-include zoom link in email
	- favorite movie was getting mixed up with education
	- terms of conditions,
	- meeting cancel buttons 

Bug testing/QA for all of the above (2-4hrs)
	-not all bugs can be caught the first times around, there are very likely still bugs in the app as with all apps in developement
	- most of the bug testing involved testing background workers to make sure they functioned and notifications.
	- could have done much more extensive bug testing but I figured it would be more efficient to catch the minor bugs as the pop up in real use cases instead of wasting time exploring every possible user interaction


Total Estimate was:  14hrs to 23hrs
The time it actually took was around 15hrs



